#!/usr/bin/env bash

download_verify_tar(){
  curl $TAR_URL -s -f -L --retry 3 --connect-timeout 20 --retry-delay 1 -o $FILENAME

  if [[ "<%= checksum_value %>" == "gpg" ]]; then
    # verify GPG
    local fingerprint=$(gpg --status-fd 1 --fingerprint $PUBLIC_KEY 2>/dev/null)
    local key_fingerprint=$(echo "$fingerprint" | grep "Key fingerprint*" | awk '{split($0,a,"="); print a[2]}' | sed 's/ //g')

    curl "$TAR_URL.asc" -s -f -L --retry 3 --connect-timeout 20 --retry-delay 1 -o "$FILENAME.asc"
    local gpg_status=$(gpg --status-fd 1 --verify "$FILENAME.asc" $FILENAME 2> /dev/null)
    local verified=$(echo "$gpg_status" | grep "^\[GNUPG:\] VALIDSIG $key_fingerprint")

    echo "verified!!! $verified"
    if [ -z "$verified" ]; then
      echo "Checksum is not matching!"
      exit 1
    fi
  else
    # verify MD5 andd SHA256
    local length=$(echo -n "<%= checksum_value %>" | wc -c)
    if [ "$length" -eq "64" ]; then
      checksum=$(sha256sum $FILENAME | awk '{print $1}')
    else
      checksum=$(md5sum $FILENAME | awk '{print $1}')
    fi

    if [ "$checksum" != "<%= checksum_value %>" ]; then
      echo "Checksum is not matching!"
      exit 1
    fi
  fi
}

extract_tar(){
  mkdir -p $DEST_DIR
  tar xf $FILENAME -C $DEST_DIR --strip 1
  rm $FILENAME
  cd $DEST_DIR
}

main() {
  set -xe
  set -o pipefail

  download_verify_tar && extract_tar && template_steps
  echo "Done!"
}




